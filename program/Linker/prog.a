;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.3 Standard
;Automatic Program Generator
;© Copyright 1998-2011 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 11/1/2021
;Author  : asd
;Company : asd
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;int detik,menit,jam=0;
;char angka[60]={
;0x00,0x01,0x02,0x03,0x04,0x05,0x06,0x07,0x08,0x09,
;0x10,0x11,0x12,0x13,0x14,0x15,0x16,0x17,0x18,0x19,
;0x20,0x21,0x22,0x23,0x24,0x25,0x26,0x27,0x28,0x29,
;0x30,0x31,0x32,0x33,0x34,0x35,0x36,0x37,0x38,0x39,
;0x40,0x41,0x42,0x43,0x44,0x45,0x46,0x47,0x48,0x49,
;0x50,0x51,0x52,0x53,0x54,0x55,0x56,0x57,0x58,0x59};

	.DSEG
;// Declare your global variables here
;
;void ubahjam(){
; 0000 0024 void ubahjam(){

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0025     if(PINA.0==0){
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0026     jam++;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0027     PORTB=angka[jam];
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0028     }
; 0000 0029     if(PINA.4==0){
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002A     jam--;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002B     PORTB=angka[jam];
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 002C     }
; 0000 002D }
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;void main(void)
; 0000 002F {
;PCODE: $00000027 VOL: 0
; 0000 0030 // Declare your local variables here
; 0000 0031 
; 0000 0032 // Input/Output Ports initialization
; 0000 0033 // Port A initialization
; 0000 0034 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0035 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0036 PORTA=0xff;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0037 DDRA=0x00;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0038 
; 0000 0039 // Port B initialization
; 0000 003A // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003B // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003C PORTB=0x00;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 003D DDRB=0xff;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 003E 
; 0000 003F // Port C initialization
; 0000 0040 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0041 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0042 PORTC=0x00;  //input
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0043 DDRC=0xff;      //output
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0044 
; 0000 0045 // Port D initialization
; 0000 0046 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0047 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0048 PORTD=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0049 DDRD=0xff;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 004A 
; 0000 004B // Timer/Counter 0 initialization
; 0000 004C // Clock source: System Clock
; 0000 004D // Clock value: Timer 0 Stopped
; 0000 004E // Mode: Normal top=0xFF
; 0000 004F // OC0 output: Disconnected
; 0000 0050 TCCR0=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0051 TCNT0=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0052 OCR0=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0053 
; 0000 0054 // Timer/Counter 1 initialization
; 0000 0055 // Clock source: System Clock
; 0000 0056 // Clock value: Timer1 Stopped
; 0000 0057 // Mode: Normal top=0xFFFF
; 0000 0058 // OC1A output: Discon.
; 0000 0059 // OC1B output: Discon.
; 0000 005A // Noise Canceler: Off
; 0000 005B // Input Capture on Falling Edge
; 0000 005C // Timer1 Overflow Interrupt: Off
; 0000 005D // Input Capture Interrupt: Off
; 0000 005E // Compare A Match Interrupt: Off
; 0000 005F // Compare B Match Interrupt: Off
; 0000 0060 TCCR1A=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0061 TCCR1B=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0062 TCNT1H=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0063 TCNT1L=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0064 ICR1H=0x00;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0065 ICR1L=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0066 OCR1AH=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0067 OCR1AL=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0068 OCR1BH=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0069 OCR1BL=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 006A 
; 0000 006B // Timer/Counter 2 initialization
; 0000 006C // Clock source: System Clock
; 0000 006D // Clock value: Timer2 Stopped
; 0000 006E // Mode: Normal top=0xFF
; 0000 006F // OC2 output: Disconnected
; 0000 0070 ASSR=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0071 TCCR2=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0072 TCNT2=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0073 OCR2=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0074 
; 0000 0075 // External Interrupt(s) initialization
; 0000 0076 // INT0: Off
; 0000 0077 // INT1: Off
; 0000 0078 // INT2: Off
; 0000 0079 MCUCR=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 007A MCUCSR=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 007B 
; 0000 007C // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 007D TIMSK=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 007E 
; 0000 007F // USART initialization
; 0000 0080 // USART disabled
; 0000 0081 UCSRB=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0082 
; 0000 0083 // Analog Comparator initialization
; 0000 0084 // Analog Comparator: Off
; 0000 0085 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0086 ACSR=0x80;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0087 SFIOR=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0088 
; 0000 0089 // ADC initialization
; 0000 008A // ADC disabled
; 0000 008B ADCSRA=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 008C 
; 0000 008D // SPI initialization
; 0000 008E // SPI disabled
; 0000 008F SPCR=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0090 
; 0000 0091 // TWI initialization
; 0000 0092 // TWI disabled
; 0000 0093 TWCR=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0094 
; 0000 0095 while (1)
;PCODE: $0000006C VOL: 0
; 0000 0096       {
; 0000 0097         if(detik==60){
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0098             detik=0;
;PCODE: $00000070 VOL: 0
; 0000 0099             menit++;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 009A             PORTD=angka[menit];
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 009B         }
; 0000 009C         if(menit==60){
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009D             menit=0;
;PCODE: $0000007C VOL: 0
; 0000 009E             jam++;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 009F             PORTB=angka[jam];
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00A0         }
; 0000 00A1         if(jam==24){
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A2             jam=0;
;PCODE: $00000088 VOL: 0
; 0000 00A3             PORTB=angka[jam];
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00A4         }
; 0000 00A5         PORTC=angka[detik];
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A6         detik++;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00A7         delay_ms(20);
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A8         ubahjam();
;PCODE: $00000098 VOL: 0
; 0000 00A9       }
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00AA }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
